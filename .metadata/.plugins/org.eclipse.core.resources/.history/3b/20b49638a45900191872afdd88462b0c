/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/


#include "stm32f4xx.h"
#include "stddef.h"
#include "FreeRTOS.h"
#include "task.h"
#include "freeRTOSConfig.h"
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

//===================================================================================================//
//======================================== Public Variables =========================================//
//===================================================================================================//

TaskHandle_t xTaskHandle1 = NULL;
TaskHandle_t xTaskHandle2 = NULL;

//===================================================================================================//
//================================== Public Function Declarations ===================================//
//===================================================================================================//

void vTask1_handler(void *params);
void vTask2_handler(void *params);

void printmsg(char *msg);

//===================================================================================================//
//======================================= Private Variables =========================================//
//===================================================================================================//
#define AVAILABLE true
#define NOT_AVAILABLE false
static bool UART_ACCESS_KEY;
//static char msg[100] = "Hello world from rob\r\n";
static char usr_msg[256];
#ifdef USE_SEMIHOSTING
extern void initialise_monitor_handles();
#endif

//===================================================================================================//
//================================== Private Function Declarations ==================================//
//===================================================================================================//

static void prvSetupUART(void);
static void prvSetupHardware(void);

//===================================================================================================//
//============================================== Main ===============================================//
//===================================================================================================//
int main(void)
{
#ifdef USE_SEMIHOSTING
	initialise_monitor_handles();
	printf("this is hello world example\n");
#endif
	// 1. Reset the RCC clock configuration to hte default reset state.
	// HSI on, PLL off, HSE off, system clock = 16MHz
	RCC_DeInit();

	// 2. Update the SystemCoreClock variable
	SystemCoreClockUpdate();

//	// Set up GPIOs and peripherals.
//	prvSetupHardware();
//
//	sprintf(usr_msg, "This is hello world application starting\r\n");
//
//	// 3. Let's create 2 tasks, task-1 and task-2
//	xTaskCreate(vTask1_handler,
//				"Task-1",
//				configMINIMAL_STACK_SIZE,
//				NULL,
//				2,
//				&xTaskHandle1);
//
//	xTaskCreate(vTask2_handler,
//					"Task-2",
//					configMINIMAL_STACK_SIZE,
//					NULL,
//					2,
//					&xTaskHandle2);
//
//	// 4. Start the scheduler. If pre-emptive scheduling: then tasks of equal priorities will execute in round-robin.
//	vTaskStartScheduler();

	// You will never return here.
	for(;;);
}

//===================================================================================================//
//============================================= Tasks ===============================================//
//===================================================================================================//

//void vTask1_handler(void *params) {
//	while(1) {
//		if(UART_ACCESS_KEY == AVAILABLE) {
//			UART_ACCESS_KEY = NOT_AVAILABLE;
//			printmsg("hello from task1\n");
//			UART_ACCESS_KEY = AVAILABLE;
//			taskYIELD();
//		}
//	}
//
//}
//
//void vTask2_handler(void *params) {
//	while(1) {
//		if(UART_ACCESS_KEY == AVAILABLE) {
//			UART_ACCESS_KEY = NOT_AVAILABLE;
//			printf("HELLO FROM TASK2\n");
//			UART_ACCESS_KEY = AVAILABLE;
//			taskYIELD();
//		}
//	}
//}


//===================================================================================================//
//======================================== Public functions =========================================//
//===================================================================================================//

// Blocking print of *msg*.
//void printmsg(char *msg) {
//	int i=0;
//	for(i=0; i<strlen(msg); i++) {
//		// Wait until USART peripheral ready for new tranmission (DR is empty).
//		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) != SET);
//		USART_SendData(USART2, msg[i]);
//	}
//}


//===================================================================================================//
//======================================== Private functions ========================================//
//===================================================================================================//
//static void prvSetupUART(void) {
//	GPIO_InitTypeDef gpio_uart_pins;
//	USART_InitTypeDef uart2_init;
//
//	// 1. Enable the UART Peripheral clock
//	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
//	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
//
//	// 2. USART2 comms over PA2 (TX) and PA3 (RX) when configured under AF7
//
//	// Init PA2 as USART2 TX and PA3 as USART2 RX
//	memset(&gpio_uart_pins, 0, sizeof(gpio_uart_pins));
//	memset(&uart2_init, 0, sizeof(uart2_init));
//
//	gpio_uart_pins.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
//	gpio_uart_pins.GPIO_Mode = GPIO_Mode_AF;
//	gpio_uart_pins.GPIO_PuPd = GPIO_PuPd_UP;
//	GPIO_Init(GPIOA, &gpio_uart_pins);
//
//	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
//	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
//
//	// Init USART2.
//	memset(&uart2_init, 0, sizeof(uart2_init));
//	uart2_init.USART_BaudRate = 115200;
//	uart2_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
//	uart2_init.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
//	uart2_init.USART_Parity = USART_Parity_No;
//	uart2_init.USART_StopBits = USART_StopBits_1;
//	uart2_init.USART_WordLength = USART_WordLength_8b;
//
//	USART_Init(USART2, &uart2_init);
//
//	USART_Cmd(USART2, ENABLE);
//}
//
//static void prvSetupHardware(void) {
//	// setup UART2.
//	prvSetupUART();
//}

